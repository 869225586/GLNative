def remoteBranch = "release/RB_v2.1.1" //远端分支名
def errorMsg = "build failed : the sdk version code is error"
/**
 * 检查版本号 true从master 拉分支 false从 release 拉分支
 */
boolean checkVersion(String errorMsg) {
    def versions ="v2.1.1.3".split("\\.")
    if (versions.size() != 4) {
        //版本号出错
        throw new Exception(errorMsg)
    }
    //判断是否需要
    if (versions[versions.size() - 1].toInteger() == 0) {
        //末尾是0 新版本 需要 拉分支 打tag
        return true
    } else {
        //判断前三位版本号是否一致
        def tagP = "git tag".execute()
        def tagArray=tagP.inputStream.text.split("\n")
        def lastTagCode = tagArray[tagArray.size()-1].substring(1).split("\\.")
        lastTagCode.each {
            println(it)
        }

        if (lastTagCode.size() == 4) {
            if (versions[0] == lastTagCode[0] && versions[1] == lastTagCode[1]
                    && versions[2] == lastTagCode[2]&&versions[3]>lastTagCode[3]) {

                return false
            } else {
                throw new Exception(errorMsg)
            }
        }else{
            throw new Exception("No Valid Tag ")
        }


    }
}

def checkoutLocalBranch(String remoteBranchName, String errorMsg) {
    // 从某个远端分支 拉本地分支  并且打 tag
    if (true) {
        println("checkout branch from master")
        "git checkout -b release/RB_v2.1.1 origin/master".execute()
//        //从主分支拉 要打 Tag
        "git tag -a r/2.1.5 -m ''".execute()
        "git push origin r/2.1.5".execute()
    } else {
        //从release 分支拉
        println("checkout branch from release")
        "git checkout -b release/RB_v2.1.1 origin/${remoteBranchName}".execute()
    }

}
boolean   getLocalBranchName(String branch){
    def p = "git branch ".execute()
    def result= false
    def localBranch = p.inputStream.text.split("\n")
    localBranch.each {
        if(it.contains("*")){
            println(it.substring(1))
        }
        if(it.trim() == branch){
            result = true
        }
    }
    return result

}
/**
 * 推送 version.txt 和 dependence.gradle 到git
 * @return
 */
def pushVersionAndGradlToGit() {
    def statusP = "git status".execute()
    println("git status:\n" + statusP.inputStream.text)
    statusP.waitFor()

    def addP = "git add version/version.gradle".execute()
    println("git add:\n" + addP.inputStream.text)
    addP.waitFor()

    def addP2 = "git add app/dependence.gradle".execute()
    println("git add:\n" + addP2.inputStream.text)
    addP2.waitFor()

    def commitP = "git commit -m 'sdk version'".execute()
    println("git commit:\n" + commitP.inputStream.text)
    commitP.waitFor()

    def pushP = "git push origin release/RB_v2.1.1:release/RB_v2.1.1".execute()
    println("git push:\n" + pushP.inputStream.text)
    pushP.waitFor()

    def tagP = "git tag -a ${tag} -m ''".execute()
    println("git tag:\n" + tagP.inputStream.text)
    tagP.waitFor()

    def pushTagP = "git push origin ${remoteBranch} ${tag}".execute()
    println("git push tag:\n" + pushTagP.inputStream.text)
    pushTagP.waitFor()
}
def test(){
    localBranch = "444"
}
/**
 * git推送 task
 */
task startGit {
    doLast {
//        checkoutLocalBranch(remoteBranch,errorMsg)
//        checkVersion(errorMsg)

        println(getLocalBranchName(remoteBranch)
        )
    }
}


