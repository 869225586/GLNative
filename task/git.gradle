def remoteBranch = "release/RB_" + ALLINONE_VERSION.toString().substring(0, ALLINONE_VERSION.length()) //远端分支名
def errorMsg = "build failed : the sdk version code is error"
def commitMsg = "打包版本提交"
/**
 * 检查版本号 true从master 拉分支 false从 release 拉分支
 */
boolean checkVersion(String errorMsg) {
    def versions = ALLINONE_VERSION.toString().split("\\.")
    if (versions.size() != 4) {
        //版本号出错
        throw new Exception(errorMsg)
    }
    //判断是否需要
    if (versions[versions.size() - 1].toInteger() == 0) {
        //末尾是0 新版本 需要 拉分支 打tag
        return true
    } else {
        //判断前三位版本号是否一致
        def p = "git branch -a".execute()
        def remoteBranchs = []
        p.text.eachLine {
            if (it.contains("release/RB")) {
                int index = it.lastIndexOf("_")
                remoteBranchs = it.substring(index + 1).split("\\.")
            }
        }
        if (remoteBranchs.size() >= 3) {
            if (versions[0] == remoteBranchs[0] && versions[1] == remoteBranchs[1]
                    && versions[2] == remoteBranchs[2]) {

                return false
            } else {
                throw new Exception(errorMsg)
            }
        }


    }
}
/**
 * 从远端拉分支
 * @param remoteBranchName
 * @param errorMsg
 * @return
 */
def checkoutLocalBranch(String remoteBranchName, String errorMsg) {
    def tag
    // 从某个远端分支 拉本地分支  并且打 tag
    if (checkVersion(errorMsg)) {
        tag = "r" + ALLINONE_VERSION.toString().substring(
                0, ALLINONE_VERSION.toString().length() - 2
        )
        println("checkout branch from master")
        "git checkout -b ${remoteBranchName} origin/master".execute()
//        //从主分支拉 要打 Tag
        "git tag -a ${tag} -m ''".execute()
        "git push origin ${tag}".execute()
    } else {
        //从release 分支拉
        println("checkout branch from release")
        "git checkout -b ${remoteBranchName} origin/${remoteBranchName}".execute()
    }

}

/**
 * 推送 version.txt 和 dependence.gradle 到git
 * @return
 */
def pushVersionAndGradlToGit(String remoteBranch,String commitMsg) {
    def tag = "v" + ALLINONE_VERSION.toString()
    def statusP = "git status".execute()
    println("git status:\n" + statusP.inputStream.text)
    statusP.waitFor()

    def addP = "git add version/version.gradle".execute()
    println("git add:\n" + addP.inputStream.text)
    addP.waitFor()

    def addP2 = "git add app/dependence.gradle".execute()
    println("git add:\n" + addP2.inputStream.text)
    addP2.waitFor()

    def commitP = "git commit -m '${commitMsg}'".execute()
    println("git commit:\n" + commitP.inputStream.text)
    commitP.waitFor()

    def pushP = "git push origin ${remoteBranch}:${remoteBranch}".execute()
    println("git push:\n" + pushP.inputStream.text)
    pushP.waitFor()

    def tagP = "git tag -a ${tag} -m ''".execute()
    println("git tag:\n" + tagP.inputStream.text)
    tagP.waitFor()

    def pushTagP = "git push origin ${remoteBranch} ${tag}".execute()
    println("git push tag:\n" + pushTagP.inputStream.text)
    pushTagP.waitFor()
}
/**
 * git推送 task
 */
task startGit {
    if (!IS_RELEASE.toBoolean()) {
        //如果不是release 版本不推送git
        return
    }
    doLast {
        //先拉分支 打tag
        checkoutLocalBranch(remoteBranch, errorMsg)
    }
}


