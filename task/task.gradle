apply from: 'git.gradle'

//声明 所有依赖项集合
configurations.embed.transitive = false
def dependenceList = []
//version 版本信息集合
def versionList = []
def moudles = this.rootProject.getAllprojects()
def POM_VERSION = getPomVersion()
def POM_ARTIFACTID = "allinone"//项目名称id
def POM_GROUPID = 'com.kwai.video'  //项目组id
def env = {System.getenv it}

/**
 * 获取 版本号
 * @return
 */
String getPomVersion() {
    if (SDK_TYPE.toString() == SDK_TYPE_ALL.toString()) {
        return "${VERSION}-yy"
    } else if (SDK_TYPE.toString() == SDK_TYPE_SHORT.toString()) {
        return "${VERSION}-shortvideo-yy"
    } else if (SDK_TYPE.toString() == SDK_TYPE_LIVE.toString()) {
        return outputFileName = "${VERSION}-live-yy"
    }
}
/**
 * 修改 build.gradle
 */
task changeDependenceBuild {
    def destDir = new File(this.rootDir, 'app/dependence.gradle')
    doLast {
        destDir.withWriter { writer ->
            writer.write("dependencies {\n")
            writer.write("     implementation '" + POM_GROUPID + ":" + POM_ARTIFACTID + "-" + POM_VERSION + "@aar'\n")
            writer.write("}")
        }
    }
}

/**
 * 处理 所有依赖放到集合里
 */
task loadDependence {
    //基础sdk
    dependenceList << FFMPEG_VERSION
    versionList << "ffmpeng: " + FFMPEG_VERSION + "\n"

    dependenceList << AUDIOPROCESS_VERSION
    versionList << "audioProcess: " + AUDIOPROCESS_VERSION + "\n"

    dependenceList << KSTURBOJPEGLIB_VERSION
    versionList << "ksturbojpeglib: " + KSTURBOJPEGLIB_VERSION + "\n"

    dependenceList << LIBYUV_VERSION
    versionList << "libyuv: " + LIBYUV_VERSION + "\n"

    dependenceList << KSCPPPROTOBUF_VERSION
    versionList << "kscppprotobuf: " + KSCPPPROTOBUF_VERSION + "\n"

    //拍摄 sdk
    dependenceList << DAENERYS_VERSION
    versionList << "daenerys: " + DAENERYS_VERSION + "\n"

    dependenceList << WESTEROS_VERSION
    versionList << "westeros: " + WESTEROS_VERSION + "\n"

    dependenceList << KSCAMERAKIT_VERSION
    versionList << "kscamerakit: " + KSCAMERAKIT_VERSION + "\n"

    //播放 sdk
    dependenceList << AEGON_VERSION
    versionList << "aegon: " + AEGON_VERSION + "\n"

    dependenceList << HODOR_VERSION
    versionList << "hodor: " + HODOR_VERSION + "\n"

    dependenceList << HODOR_DEBUG_TOOLS_VERSION
    versionList << "hodor_debug_tools: " + HODOR_DEBUG_TOOLS_VERSION + "\n"

    dependenceList << KWAIPLAYER_VERSION
    versionList << "kwaiplayer: " + KWAIPLAYER_VERSION + "\n"

    dependenceList << KWAIPLAYER_DEBUG_TOOLS_VERSION
    versionList << "kwaiplayer_debug_tools: " + KWAIPLAYER_DEBUG_TOOLS_VERSION + "\n"

    dependenceList << KSVODPLAYERKIT_VERSION
    versionList << "ksvodplayerkit: " + KSVODPLAYERKIT_VERSION + "\n"

    if (SDK_TYPE.toString() == SDK_TYPE_ALL.toString() || SDK_TYPE.toString() == SDK_TYPE_SHORT.toString()) {
        //短视频包或者全量包
        //基础sdk
        dependenceList << LIBUV_VERSION
        versionList << "libuv: " + LIBUV_VERSION + "\n"

        //编辑 sdk
        dependenceList << KSVIDEORENDER_VERSION
        versionList << "ksvideorender: " + KSVIDEORENDER_VERSION + "\n"
        dependenceList << KSVISIONEGINE_VERSION
        versionList << "ksvisionegine: " + KSVISIONEGINE_VERSION + "\n"
        dependenceList << KSCAPEKIT_VERSION
        versionList << "kscapekit: " + KSCAPEKIT_VERSION + "\n"
        dependenceList << KSCLIPKIT_VERSION
        versionList << "ksclipkit: " + KSCLIPKIT_VERSION + "\n"

        //上传 sdk
        dependenceList << RICKON_VERSION
        versionList << "rickon: " + RICKON_VERSION + "\n"
        dependenceList << KSUPLOADERKIT_VERSION
        versionList << "ksuploaderkit: " + KSUPLOADERKIT_VERSION + "\n"
    }

    if (SDK_TYPE.toString() == SDK_TYPE_LIVE.toString() || SDK_TYPE.toString() == SDK_TYPE_ALL.toString()) {
        //直播包 或者全量包
        //直播 sdk
        dependenceList << ARYA_VERSION
        versionList << "arya: " + ARYA_VERSION + "\n"
        dependenceList << STANNIS_VERSION
        versionList << "stannis: " + STANNIS_VERSION + "\n"
        dependenceList << RTCKIT_VERSION
        versionList << "rtckit: " + RTCKIT_VERSION + "\n"
        dependenceList << KSLIVEPLAYER_VERSION
        versionList << "ksliveplayer: " + KSLIVEPLAYER_VERSION + "\n"
        dependenceList << KSMEDIALIVEKIT_VERSION
        versionList << "ksmedialivekit: " + KSMEDIALIVEKIT_VERSION + "\n"
    }
    println("配置依赖项完毕")
}

//保存version 文件
task saveVersionFile {
    if (IS_TEST.toBoolean()) {
        //如果不是release 版本不保存 版本信息
        return
    }
    def destDir = new File(this.rootDir, 'version')
    destDir.mkdir()
    def name = "ALLINONE_SDK_VERISON :" + VERSION + "\n"
    def versionInfo = "SDK版本信息 : \n"
    def destFile = new File(destDir, "version.txt")
    destFile.withWriter { writer ->
        writer.write("${name}${versionInfo}")
        versionList.each {
            if (it?.trim()) {
                writer.write("${it}")
            }
        }
    }
    println("version文件保存完毕")
}

/**
 * 添加依赖
 */
task addDependence(dependsOn: [loadDependence, saveVersionFile]) {
    moudles.each {
        if ("allinonelibrary" == it.name) {
            Project project = it.project
            dependenceList.each {
                /*  String[] str = it.replace("@aar", "").split(":")
                  def sdkName = str[str.length - 2]*/
                if (it?.trim()) {
                    println("SDK 添加依赖" + it)
                    project.dependencies.add("embed", it)
                }
            }
        }
    }
}


def delete(List list) {
    list.each {
        String[] str = it.replace("@aar", "").split(":")
        def sdkName = str[str.length - 2]
        def sdkShortVersion = str[str.length - 1]
        def sdkGroup = str[0]
        println("去重 " + sdkName);
        def debugSoV7a = file("build/intermediates/exploded-aar/" + sdkGroup + "/" + sdkName + "/" + sdkShortVersion + "/debug/jni/armeabi-v7a/libc++_shared.so")
        def debugSoV8a = file("build/intermediates/exploded-aar/" + sdkGroup + "/" + sdkName + "/" + sdkShortVersion + "/debug/jni/arm64-v8a/libc++_shared.so")
        def releaseSoV7a = file("build/intermediates/exploded-aar/" + sdkGroup + "/" + sdkName + "/" + sdkShortVersion + "/release/jni/armeabi-v7a/libc++_shared.so")
        def releaseSoV8a = file("build/intermediates/exploded-aar/" + sdkGroup + "/" + sdkName + "/" + sdkShortVersion + "/release/jni/arm64-v8a/libc++_shared.so")

        //目前保留daenerys 里面的shared.so
        if (sdkName == "daenerys") return
        if (debugSoV7a.exists()) {
            boolean result = delete(debugSoV7a)
            println(sdkName + "v7a debug去重 ${result}")
        }
        if (debugSoV8a.exists()) {
            boolean result = delete(debugSoV8a)
            println(sdkName + "v8a debug去重 ${result}")
        }
        if (releaseSoV7a.exists()) {
            boolean result = delete(releaseSoV7a)
            println(sdkName + "v7a release去重 ${result}")
        }
        if (releaseSoV8a.exists()) {
            boolean result = delete(releaseSoV8a)
            println(sdkName + "v8a release去重 ${result}")
        }
    }
}

task deleteDuplicateResources() {
    doLast {
        delete(dependenceList)
    }
}
//针对某一个 过程进行相应的 去重
afterEvaluate {
    tasks.matching {
        it.name == 'mergeDebugJniLibFolders' || it.name == 'mergeReleaseJniLibFolders'
    }.each { task ->
        println '++++++++++++  ' + task.name + '  +++++++++++++++'
        task.dependsOn 'deleteDuplicateResources'
        task.mustRunAfter 'deleteDuplicateResources'
    }

}

