apply from: 'git.gradle'
apply plugin: 'maven'
apply plugin: 'maven-publish'
//声明 所有依赖项集合
configurations.embed.transitive = false
def dependenceList = []
//version 版本信息集合
def versionList = []
def moudles = this.rootProject.getAllprojects()
def POM_VERSION = getPomVersion()
def POM_ARTIFACTID = "allinone"//项目名称id
def POM_GROUPID = 'com.kwai.video'  //项目组id
def POM_PACKAGING = 'aar'
def POM_DESCRIPTION = 'update version' + env(VERSION)
def NEXUS_USERNAME = 'admin'   //用户名
def NEXUS_PASSWORD = 'admin123'  //密码
def NEXUS_REPOSITORY_URL = 'http://localhost:8081/repository/ttsx/'  //repository的URL

/**
 * 获取 版本号
 * @return
 */
String getPomVersion() {
    def type = env(SDK_TYPE)
    def version = env(VERSION)
    def pbversion = env('PROTOBUF_DISTRIBUTION_VERSION')
    def build_number = System.getenv('BUILD_NUMBER')
    def id = build_number ? build_number.toInteger() : 1
    def pomversion
    if (type == SDK_TYPE_ALL.toString()) {
        pomversion = "v${version}-pb${pbversion}-${id}"
    } else if (type == SDK_TYPE_SHORT.toString()) {
        pomversion = "v${version}-shortvideo-pb${pbversion}-${id}"
    } else if (type == SDK_TYPE_LIVE.toString()) {
        pomversion = "v${version}-live-pb${pbversion}-${id}"
    } else {
        def moudleArr = type.split(",")
        def versionStr = "v${version}-"
        moudleArr.each {
            versionStr += "[${it}]-"
        }
        pomversion = versionStr + "pb${pbversion}-${id}"
    }
    if (envToBoolean(IS_TEST, false)) {
        pomversion += "-test"
    }
    println("the aar  version is ${pomversion}")
    return pomversion
}


/**
 * 处理 所有依赖放到集合里
 */
task loadDependence {
    def type = env(SDK_TYPE)
    //魔表的不打入allinone

    if (type != SDK_TYPE_ALL.toString() && type != SDK_TYPE_SHORT.toString() && type != SDK_TYPE_LIVE.toString()) {
        //自定义包
        def moudleArr = type.split(",")
        moudleArr.each {
            def key = rootProject.ext.moudleMap[it]
            if (key?.toString()?.trim()) {
                def moudleAAr = env(key)
                dependenceList << moudleAAr
                versionList << "${it}: " + moudleAAr + "\n"
            }
        }
    } else {
        //基础sdk
        def ffmpeg = env(FFMPEG_VERSION)
        dependenceList << ffmpeg
        versionList << "ffmpeg: " + ffmpeg + "\n"

        def audioprocess = env(AUDIOPROCESS_VERSION)
        dependenceList << audioprocess
        versionList << "audioProcess: " + audioprocess + "\n"

        def ksturbojpeglib = env(KSTURBOJPEGLIB_VERSION)
        dependenceList << ksturbojpeglib
        versionList << "ksturbojpeglib: " + ksturbojpeglib + "\n"

        def libyuv = env(LIBYUV_VERSION)
        dependenceList << libyuv
        versionList << "libyuv: " + libyuv + "\n"

        def kscppprotobuf = env(KSCPPPROTOBUF_VERSION)
        dependenceList << kscppprotobuf
        versionList << "kscppprotobuf: " + kscppprotobuf + "\n"

        //拍摄 sdk
        def daenerys = env(DAENERYS_VERSION)
        dependenceList << daenerys
        versionList << "daenerys: " + daenerys + "\n"

        def westeros = env(WESTEROS_VERSION)
        dependenceList << westeros
        versionList << "westeros: " + westeros + "\n"

        def kscamerakit = env(KSCAMERAKIT_VERSION)
        dependenceList << kscamerakit
        versionList << "kscamerakit: " + kscamerakit + "\n"

        //播放 sdk
        def aegon = env(AEGON_VERSION)
        dependenceList << aegon
        versionList << "aegon: " + aegon + "\n"

        def hodor = env(HODOR_VERSION)
        dependenceList << hodor
        versionList << "hodor: " + hodor + "\n"

        def hodor_debug_tools = env(HODOR_DEBUG_TOOLS_VERSION)
        dependenceList << hodor_debug_tools
        versionList << "hodor_debug_tools: " + hodor_debug_tools + "\n"

        def kwaiplayer = env(KWAIPLAYER_VERSION)
        dependenceList << kwaiplayer
        versionList << "kwaiplayer: " + kwaiplayer + "\n"

        def kwaiplayer_debug_tools = env(KWAIPLAYER_DEBUG_TOOLS_VERSION)
        dependenceList << kwaiplayer_debug_tools
        versionList << "kwaiplayer_debug_tools: " + kwaiplayer_debug_tools + "\n"

        def ksvodplayerkit = env(KSVODPLAYERKIT_VERSION)
        dependenceList << ksvodplayerkit
        versionList << "ksvodplayerkit: " + ksvodplayerkit + "\n"

        if (type == SDK_TYPE_ALL.toString() || type == SDK_TYPE_SHORT.toString()) {
            //短视频包或者全量包
            //基础sdk
            def libuv = env(LIBUV_VERSION)
            dependenceList << libuv
            versionList << "libuv: " + libuv + "\n"

            //编辑 sdk
            def ksvideorender = env(KSVIDEORENDER_VERSION)
            dependenceList << ksvideorender
            versionList << "ksvideorender: " + ksvideorender + "\n"

            def ksvisionegine = env(KSVISIONEGINE_VERSION)
            dependenceList << ksvisionegine
            versionList << "ksvisionegine: " + ksvisionegine + "\n"

            def kscapekit = env(KSCAPEKIT_VERSION)
            dependenceList << kscapekit
            versionList << "kscapekit: " + kscapekit + "\n"

            def ksclipkit = env(KSCLIPKIT_VERSION)
            dependenceList << ksclipkit
            versionList << "ksclipkit: " + ksclipkit + "\n"

            //上传 sdk
            def rickon = env(RICKON_VERSION)
            dependenceList << rickon
            versionList << "rickon: " + rickon + "\n"

            def ksuploaderkit = env(KSUPLOADERKIT_VERSION)
            dependenceList << ksuploaderkit
            versionList << "ksuploaderkit: " + ksuploaderkit + "\n"
        }

        if (type == SDK_TYPE_LIVE.toString() || type == SDK_TYPE_ALL.toString()) {
            //直播包 或者全量包
            //直播 sdk
            def arya = env(ARYA_VERSION)
            dependenceList << arya
            versionList << "arya: " + arya + "\n"

            def stannis = env(STANNIS_VERSION)
            dependenceList << stannis
            versionList << "stannis: " + stannis + "\n"

            def rtckit = env(RTCKIT_VERSION)
            dependenceList << rtckit
            versionList << "rtckit: " + rtckit + "\n"

            def ksliveplayer = env(KSLIVEPLAYER_VERSION)
            dependenceList << ksliveplayer
            versionList << "ksliveplayer: " + ksliveplayer + "\n"

            def ksmedialivekit = env(KSMEDIALIVEKIT_VERSION)
            dependenceList << ksmedialivekit
            versionList << "ksmedialivekit: " + ksmedialivekit + "\n"
        }
    }


    println("配置依赖项完毕")
}

//保存version 文件
task saveVersionFile {
    if (envToBoolean(IS_TEST, false)) {
        //如果不是release 版本不保存 版本信息
        return
    }
    def destDir = new File(this.rootDir, 'version')
    destDir.mkdir()
    def name = "ALLINONE_SDK_VERISON :" + VERSION + "\n"
    def versionInfo = "SDK版本信息 : \n"
    def destFile = new File(destDir, "version.txt")
    destFile.withWriter { writer ->
        writer.write("${name}${versionInfo}")
        versionList.each {
            if (it?.trim()) {
                writer.write("${it}")
            }
        }
    }
    println("version文件保存完毕")

}
/**
 * 修改 build.gradle
 */
task changeDependenceBuild(dependsOn: saveVersionFile) {
    def destDir = new File(this.rootDir, 'app/dependence.gradle')
    doLast {
        destDir.withWriter { writer ->
            writer.write("dependencies {\n")
            writer.write("     implementation '" + POM_GROUPID + ":" + POM_ARTIFACTID + ":" + POM_VERSION + "@aar'\n")
            writer.write("}")
        }
        println("dependece 更新完毕 ")
        pushVersionAndGradlToGit.execute()
    }

}
/**
 * 添加依赖
 */
task addDependence(dependsOn: [loadDependence, changeDependenceBuild]) {
    moudles.each {
        if ("allinonelibrary" == it.name) {
            Project project = it.project
            dependenceList.each {
                /*  String[] str = it.replace("@aar", "").split(":")
                  def sdkName = str[str.length - 2]*/
                if (it?.trim()) {
                    println("SDK 添加依赖" + it)
                    project.dependencies.add("embed", it)
                }
            }
        }
    }
}


def delete(List list) {
    list.each {
        String[] str = it.replace("@aar", "").split(":")
        def sdkName = str[str.length - 2]
        def sdkShortVersion = str[str.length - 1]
        def sdkGroup = str[0]
        println("去重 " + sdkName);
        def debugSoV7a = file("build/intermediates/exploded-aar/" + sdkGroup + "/" + sdkName + "/" + sdkShortVersion + "/debug/jni/armeabi-v7a/libc++_shared.so")
        def debugSoV8a = file("build/intermediates/exploded-aar/" + sdkGroup + "/" + sdkName + "/" + sdkShortVersion + "/debug/jni/arm64-v8a/libc++_shared.so")
        def releaseSoV7a = file("build/intermediates/exploded-aar/" + sdkGroup + "/" + sdkName + "/" + sdkShortVersion + "/release/jni/armeabi-v7a/libc++_shared.so")
        def releaseSoV8a = file("build/intermediates/exploded-aar/" + sdkGroup + "/" + sdkName + "/" + sdkShortVersion + "/release/jni/arm64-v8a/libc++_shared.so")

        //目前保留daenerys 里面的shared.so
        if (sdkName == "daenerys") return
        if (debugSoV7a.exists()) {
            boolean result = delete(debugSoV7a)
            println(sdkName + "v7a debug去重 ${result}")
        }
        if (debugSoV8a.exists()) {
            boolean result = delete(debugSoV8a)
            println(sdkName + "v8a debug去重 ${result}")
        }
        if (releaseSoV7a.exists()) {
            boolean result = delete(releaseSoV7a)
            println(sdkName + "v7a release去重 ${result}")
        }
        if (releaseSoV8a.exists()) {
            boolean result = delete(releaseSoV8a)
            println(sdkName + "v8a release去重 ${result}")
        }
    }
}

task deleteDuplicateResources() {
    doLast {
        delete(dependenceList)
    }
}
//针对某一个 过程进行相应的 去重
afterEvaluate {
    tasks.matching {
        it.name == 'mergeDebugJniLibFolders' || it.name == 'mergeReleaseJniLibFolders'
    }.each { task ->
        println '++++++++++++  ' + task.name + '  +++++++++++++++'
        task.dependsOn 'deleteDuplicateResources'
        task.mustRunAfter 'deleteDuplicateResources'
    }
}
task buildAllinoneSdk(dependsOn: [startGit, addDependence, uploadArchives]) {
    println("start build allinone sdk")
}
//在task被添加的时候定义依赖关系
tasks.whenTaskAdded {
    task ->
        if (task.name == "pushVersionAndGradlToGit") {
            task.dependsOn 'changeDependenceBuild'
        }
        if (task.name == "saveVersionFile") {
            println("")
            task.mustRunAfter 'startGit'
        }
}
//发布aar到仓库
uploadArchives {
    repositories {
        mavenDeployer {
            //指定maven 仓库地址和用户名密码
            repositories {
                maven {
                    credentials {
                        username NEXUS_USERNAME
                        password NEXUS_PASSWORD
                    }
                    url NEXUS_REPOSITORY_URL //maven库地址
                }
            }
            pom.project {
                version POM_VERSION
                artifactId POM_ARTIFACTID
                groupId POM_GROUPID
                packaging POM_PACKAGING
                description POM_DESCRIPTION
            }
        }
    }
}